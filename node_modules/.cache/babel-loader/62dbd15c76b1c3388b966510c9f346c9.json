{"ast":null,"code":"var _jsxFileName = \"/Users/allisonmoss/dev/devdo/devdo-frontend/frontend/src/components/IdeaCreate.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { useState } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { Input } from 'reactstrap';\nimport { APIURL } from '../config';\nimport IdeaForm from './IdeaForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function IdeaCreate() {\n  _s();\n\n  const initialTagState = [];\n  const [tags, setTags] = useState(initialTagState);\n  const initialIdeaState = {\n    title: '',\n    tags: tags\n  };\n  const [idea, setIdea] = useState(initialIdeaState);\n  const [createdId, setCreatedId] = useState(null);\n  const [error, setError] = useState(false);\n\n  const handleChangeTags = e => {\n    // console.log(e)\n    const isChecked = e.currentTarget.checked; // console.log(tags)\n    // console.log(typeof tags)\n\n    let newTagArr = [...tags, e.currentTarget.value];\n\n    if (isChecked) {\n      // newTagArr.push(e.currentTarget.value)\n      setTags(newTagArr);\n    } else {\n      let removedTagArr = newTagArr.filter(item => item !== e.currentTarget.value);\n      setTags(removedTagArr);\n    }\n\n    setIdea({ ...idea,\n      tags: tags\n    });\n    console.log(idea);\n  };\n\n  const handleChange = e => {\n    // if (e.target.type === 'checkbox') {\n    //     console.log('that is a checkbox')\n    //     handleChangeTags(e)\n    // }\n    e.persist();\n    setIdea({ ...idea,\n      [e.target.name]: e.target.value\n    });\n    console.log(idea);\n  }; // const handleChangeTags = (e) => {\n  //     const isChecked = e.target.checked\n  //     let newTagArr = tags\n  //     if (isChecked) {\n  //         newTagArr.push(e.target.value)\n  //         setTags(newTagArr)\n  //     } else {\n  //         const index = tags.indexOf(e.target.value)\n  //         newTagArr.splice(index, 1)\n  //         setTags(newTagArr)\n  //     }\n  // }\n\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const url = `${APIURL}/ideas/`;\n    const stuffToSend = {\n      method: 'POST',\n      headers: {\n        'Content-type': 'application/json; charset=UTF-8',\n        'Authorization': `Token ${localStorage.getItem('token')}`\n      },\n      body: JSON.stringify(idea),\n      credentials: 'include'\n    };\n    console.log(stuffToSend);\n    fetch(url, stuffToSend).then(res => res.json()).then(data => {\n      setCreatedId(data.id);\n    }).catch(() => {\n      setError(true);\n    });\n  };\n\n  if (createdId) {\n    return /*#__PURE__*/_jsxDEV(Redirect, {\n      to: `/ideas/${createdId}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"What's your idea?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"alert alert-danger\",\n      children: \"Sorry, something went wrong. Please try again.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(IdeaForm, {\n      idea: idea,\n      handleChange: handleChange,\n      handleSubmit: handleSubmit,\n      handleChangeTags: handleChangeTags\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 9\n  }, this);\n} //what do I need to do?\n//I need to set up an event listener that will update the tags list when boxes are checked \n\n_s(IdeaCreate, \"BlssNvIDofIS0SOBNypSwV/JGRA=\");\n\n_c = IdeaCreate;\n\nvar _c;\n\n$RefreshReg$(_c, \"IdeaCreate\");","map":{"version":3,"sources":["/Users/allisonmoss/dev/devdo/devdo-frontend/frontend/src/components/IdeaCreate.js"],"names":["React","useEffect","useState","Redirect","Input","APIURL","IdeaForm","IdeaCreate","initialTagState","tags","setTags","initialIdeaState","title","idea","setIdea","createdId","setCreatedId","error","setError","handleChangeTags","e","isChecked","currentTarget","checked","newTagArr","value","removedTagArr","filter","item","console","log","handleChange","persist","target","name","handleSubmit","preventDefault","url","stuffToSend","method","headers","localStorage","getItem","body","JSON","stringify","credentials","fetch","then","res","json","data","id","catch"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react'\nimport { useState } from 'react'\nimport { Redirect } from 'react-router-dom'\nimport { Input } from 'reactstrap'\nimport { APIURL } from '../config'\nimport IdeaForm from './IdeaForm'\nexport default function IdeaCreate() {\n    const initialTagState = []\n    const [tags, setTags] = useState(initialTagState)\n    const initialIdeaState = {\n        title: '',\n        tags: tags\n    }\n    const [idea, setIdea] = useState(initialIdeaState)\n    const [createdId, setCreatedId] = useState(null)\n    const [error, setError] = useState(false)\n    const handleChangeTags = (e) => {\n        // console.log(e)\n        const isChecked = e.currentTarget.checked\n        // console.log(tags)\n        // console.log(typeof tags)\n        let newTagArr = [...tags, e.currentTarget.value]\n        if (isChecked) {\n            // newTagArr.push(e.currentTarget.value)\n            setTags(newTagArr)\n        } else {\n            let removedTagArr = newTagArr.filter(item => item !== e.currentTarget.value)\n            setTags(removedTagArr)\n        }\n        setIdea({\n            ...idea,\n            tags: tags\n        })\n        console.log(idea)\n    }\n    const handleChange = (e) => {\n        // if (e.target.type === 'checkbox') {\n        //     console.log('that is a checkbox')\n        //     handleChangeTags(e)\n        // }\n        e.persist()\n        setIdea({\n            ...idea,\n            [e.target.name]: e.target.value\n        })\n        console.log(idea)\n    }\n    // const handleChangeTags = (e) => {\n    //     const isChecked = e.target.checked\n    //     let newTagArr = tags\n    //     if (isChecked) {\n    //         newTagArr.push(e.target.value)\n    //         setTags(newTagArr)\n    //     } else {\n    //         const index = tags.indexOf(e.target.value)\n    //         newTagArr.splice(index, 1)\n    //         setTags(newTagArr)\n    //     }\n    // }\n    const handleSubmit = (e) => {\n        e.preventDefault()\n        const url = `${APIURL}/ideas/`\n        const stuffToSend = {\n            method: 'POST',\n            headers: {\n                'Content-type': 'application/json; charset=UTF-8',\n                'Authorization': `Token ${localStorage.getItem('token')}`\n            },\n            body: JSON.stringify(idea),\n            credentials: 'include'\n        }\n        console.log(stuffToSend)\n        fetch(url, stuffToSend\n        )\n            .then(res => res.json())\n            .then(data => {\n                setCreatedId(data.id)\n            })\n            .catch(() => {\n                setError(true)\n            })\n    }\n    if (createdId) {\n        return <Redirect to={`/ideas/${createdId}`} />\n    }\n\n    return (\n        <div>\n            <h1>What's your idea?</h1>\n            {error && <div className=\"alert alert-danger\">Sorry, something went wrong. Please try again.</div>}\n            <IdeaForm idea={idea} handleChange={handleChange} handleSubmit={handleSubmit} handleChangeTags={handleChangeTags}></IdeaForm>\n        </div>\n\n    )\n}\n\n//what do I need to do?\n    //I need to set up an event listener that will update the tags list when boxes are checked "]},"metadata":{},"sourceType":"module"}