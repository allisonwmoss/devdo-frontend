{"ast":null,"code":"var _jsxFileName = \"/Users/allisonmoss/dev/devdo/devdo-frontend/frontend/src/components/IdeaList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { APIURL } from '../config';\nimport IdeaThumb from './IdeaThumb';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function IdeaList() {\n  _s();\n\n  const [ideas, setIdeas] = useState([]);\n  const [error, setError] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const url = `${APIURL}/ideas`;\n  useEffect(() => {\n    fetch(url).then(response => response.json()).then(data => {\n      setIdeas(data);\n    }).then(() => {\n      setLoading(false);\n    }).catch(() => {\n      setError(true);\n    });\n  }, [url]);\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"alert alert-danger\",\n      children: \"Sorry, something went wrong. Please try again.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this);\n  }\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"loading, please wait\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: ideas.map(idea => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(IdeaThumb, {\n        idea: idea\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 21\n      }, this)\n    }, idea._id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n}\n\n_s(IdeaList, \"jTnHCFIXSBMn0u4dmxMswULr1+w=\");\n\n_c = IdeaList;\n\nvar _c;\n\n$RefreshReg$(_c, \"IdeaList\");","map":{"version":3,"sources":["/Users/allisonmoss/dev/devdo/devdo-frontend/frontend/src/components/IdeaList.js"],"names":["React","useEffect","useState","APIURL","IdeaThumb","IdeaList","ideas","setIdeas","error","setError","loading","setLoading","url","fetch","then","response","json","data","catch","map","idea","_id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,OAAOC,SAAP,MAAsB,aAAtB;;AAEA,eAAe,SAASC,QAAT,GAAoB;AAAA;;AAC/B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,KAAD,CAAlC;AACA,QAAM,CAACQ,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAMU,GAAG,GAAI,GAAET,MAAO,QAAtB;AACAF,EAAAA,SAAS,CAAC,MAAM;AACZY,IAAAA,KAAK,CAACD,GAAD,CAAL,CACKE,IADL,CACUC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADtB,EAEKF,IAFL,CAEUG,IAAI,IAAI;AACVV,MAAAA,QAAQ,CAACU,IAAD,CAAR;AACH,KAJL,EAKKH,IALL,CAKU,MAAM;AACRH,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH,KAPL,EAQKO,KARL,CAQW,MAAM;AACTT,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACH,KAVL;AAWH,GAZQ,EAYN,CAACG,GAAD,CAZM,CAAT;;AAaA,MAAIJ,KAAJ,EAAW;AACP,wBACI;AAAK,MAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAGH;;AACD,MAAIE,OAAJ,EAAa;AACT,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAGH;;AACD,sBACI;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,cACKJ,KAAK,CAACa,GAAN,CAAUC,IAAI,iBACX;AAAA,6BACI,QAAC,SAAD;AAAW,QAAA,IAAI,EAAEA;AAAjB;AAAA;AAAA;AAAA;AAAA;AADJ,OAAUA,IAAI,CAACC,GAAf;AAAA;AAAA;AAAA;AAAA,YADH;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AASH;;GArCuBhB,Q;;KAAAA,Q","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { APIURL } from '../config'\nimport IdeaThumb from './IdeaThumb'\n\nexport default function IdeaList() {\n    const [ideas, setIdeas] = useState([])\n    const [error, setError] = useState(false)\n    const [loading, setLoading] = useState(true)\n    const url = `${APIURL}/ideas`\n    useEffect(() => {\n        fetch(url)\n            .then(response => response.json())\n            .then(data => {\n                setIdeas(data)\n            })\n            .then(() => {\n                setLoading(false)\n            })\n            .catch(() => {\n                setError(true)\n            })\n    }, [url])\n    if (error) {\n        return (\n            <div className=\"alert alert-danger\">Sorry, something went wrong. Please try again.</div>\n        )\n    }\n    if (loading) {\n        return (\n            <div>loading, please wait</div>\n        )\n    }\n    return (\n        <div className=\"container\">\n            {ideas.map(idea => (\n                <div key={idea._id}>\n                    <IdeaThumb idea={idea} />\n                </div>\n            ))}\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}